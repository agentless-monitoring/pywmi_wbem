#!/usr/bin/python3
import math
import sys
import argparse
from pywmi_wbem.wsman.query import WSMan, WSManFault
from lxml import objectify
from lxml.etree import XMLSyntaxError

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Windows Update checker')
  parser.add_argument('-H', '--host', help="Hostname to check", type=str, required=True)  
  parser.add_argument('-S', '--ssl', help="Use a TLS connection", action='store_true')
  parser.add_argument('-a', '--authorization', help="Basic Authentication user:password", type=str, default=None)
  parser.add_argument('-c', '--update_count', help="Threshold for update warning", type=int, default=0)

  args = parser.parse_args()

  if args.authorization != None:
    username, password = args.authorization.split(":")
  else:
    username, password = (None, None)

  update_count  = args.update_count
  wsman = WSMan(args.host, tls=args.ssl, username=username, password=password, timeout=300)

  update_script = """Try {
  [Threading.Thread]::CurrentThread.CurrentUICulture = 'en-US';
  $session = New-Object -com "Microsoft.Update.Session"
  $searcher = $session.CreateUpdateSearcher()
  $results = $searcher.Search("(IsAssigned=1 and IsHidden=0 and IsInstalled=0) or (RebootRequired=1)")
} Catch {
  $ex=$_.Exception
  $ex.Message
  exit
}
$toXml = [System.Collections.ArrayList]@()
if ($results.Updates -ne $null) {
  foreach ($i in 0..($results.Updates.Count-1)) {
    $item = $results.Updates.Item($i)
    #Ignore Virus definition updates
    if ($item.Title.Contains("KB2267602 ") -or $item.Title.Contains("KB2461484 ")) {
      continue
    }
    $toXml.Add(($item | Select-Object Title, Description, IsPresent, MsrcSeverity, RebootRequired)) | out-null
  }
}
Write-Host ($toXml | ConvertTo-Xml -NoTypeInformation -Depth 3 -As String)""" 
  out = ""
  try:
    out=wsman.run_powershell_script(script = update_script)
  except WSManFault as err:
    print("UNKNOWN: WSManFault: "+ err.message)
    sys.exit(3)
  except Exception as err:
    print("UNKNOWN: %s" % (type(err).__name__))
    sys.exit(3)  
 
  stdout = out.get("stdout", '')
  stderr = out.get("stderr", '')

  if not stdout:  
    print("UNKNOWN: No data available")
    sys.exit(3)

  try:
    stdout_xml = objectify.fromstring(stdout)
    object_path = objectify.ObjectPath("Objects")
    object_el = object_path.find(stdout_xml)
  except XMLSyntaxError as err:
    message = ''
    if stdout:
      stdout = stdout.decode('utf-8-sig')
      stdout = stdout.encode('utf-8')
      stdout = stdout.replace('\n', '')
      stdout = stdout.replace('\r', '')
    if stderr:
      stderr = stderr.decode('utf-8-sig')
      stderr = stderr.encode('utf-8')
      stderr = stderr.replace('\n', '')
      stderr = stderr.replace('\r', '')

    print("UNKNOWN: %s %s" % (stdout, stderr))
    sys.exit(3)
  except Exception as err:
    print("UNKNOWN: %s" % (type(err).__name__))
    sys.exit(3)

  critical_count = 0
  warning_count = 0
  low_count = 0
  unspecified_count = 0
  not_present_count = 0

  for object in object_el.iterchildren():
   prop_path = objectify.ObjectPath("Object.Property")
   prop_el = prop_path.find(object)
   for property in prop_el:
     if property.attrib["Name"] == "MsrcSeverity":
       if property.text == "Critical":
         critical_count += 1
       elif property.text == "Important" or property.text == "Moderate":
         warning_count += 1
       elif property.text == "Low":
         low_count += 1
       else:
         unspecified_count += 1
     if property.attrib["Name"] == "IsPresent":
       if property.text == "False":
         not_present_count += 1

  total_count = critical_count + warning_count + low_count + unspecified_count

  status = "OK"
  code = 0

  if total_count > update_count:
    status = "WARNING"
    code = 1    

  if total_count == 0:
    print("UPDATE %s - No updates need to be installed" % status)
  elif total_count > 1:
    print("UPDATE %s - There are in total %s Updates waiting to be installed:" % (status, total_count))
  else:
    print("UPDATE %s - There is %s Update waiting to be installed:" % (status, total_count))

  print("%sx Update(s) which are tagged as Critical" % (critical_count))
  print("%sx Update(s) which are tagged as Warning" % (warning_count))
  print("%sx Update(s) which have a low or unspecified severity" % (low_count + unspecified_count))
  print("%sx are not present and waiting to be downloaded" % (not_present_count))

  sys.exit(code)
